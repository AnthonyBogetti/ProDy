name: CI
on:
  - push
  - pull_request
  - workflow_dispatch

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]
        python-version: ["3.10", "3.11", "3.12"]

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Miniforge
        uses: conda-incubator/setup-miniconda@v2
        with:
          miniforge-version: "latest"
          python-version: ${{ matrix.python-version }}
          activate-environment: test
          auto-update-conda: true
          channels: conda-forge

      - name: Install dependencies & build
        shell: bash -l {0}
        run: |
          conda activate test

          conda install --yes compilers

          conda install --yes \
            "numpy<2.0" \
            "pyparsing<=3.1.1" \
            scipy \
            nose \
            pytest \
            requests \
            pdbfixer \
            mdtraj \
            openmm

          conda install -c bioconda --yes clustalw

          pip install mmtf-python scikit-learn

          pip install -e .
          python setup.py build_ext --inplace --force

          ls prody/proteins/hpb.so || { echo "hpb.so not found!"; exit 1; }
          echo "hpb.so found successfully!"


          echo "Inspecting hpb.so runtime dependencies:"
          
          if [[ "${{ matrix.os }}" == "ubuntu-latest" ]]; then
            ldd prody/proteins/hpb.so || { echo "ldd failed to run or found issues!"; true; }
          fi
          if [[ "${{ matrix.os }}" == "macos-latest" ]]; then
            otool -L prody/proteins/hpb.so || { echo "otool -L failed to run or found issues!"; true; }
          fi
          
      - name: Check Fortran compiler
        shell: bash -l {0}
        run: |
          conda activate test
          which gfortran
          gfortran --version

      # - name: Test with pytest (skip the HPB import check)
      #   shell: bash -l {0}
      #   run: |
      #     conda activate test
      #     pytest 
